 
                    func calculateQuadraticRoots(number a, number b, number c)
                    begin
                        number discriminant <- power(b, 2) - 4*a*c
                        if (discriminant > 0)
                        begin
                            number root1 <- (-b + sqrt(discriminant)) / (2*a)
                            number root2 <- (-b - sqrt(discriminant)) / (2*a)
                            return toString("Two distinct real roots: {}, {}", format(root1, root2))
                        end
                        elif (discriminant = 0)
                        begin
                            number root <- -b / (2*a)
                            return toString("One real root: {}", format(root))
                        end
                        else
                        begin
                            number realPart <- -b / (2*a)
                            number imaginaryPart <- (sqrt(abs(discriminant))) / (2*a)
                            return toString("Complex roots: {} + {}i, {} - {}i", format(realPart, imaginaryPart, realPart, imaginaryPart))
                        end
                    end

                    func getUserInput()
                    begin
                        number a <- toNumber(input("Enter the coefficient a: "))
                        number b <- toNumber(input("Enter the coefficient b: "))
                        number c <- toNumber(input("Enter the coefficient c: "))
                        return [a, b, c]
                    end

                    func displayResult(number result)
                    begin
                        print(result)
                    end

                    func main()
                    begin
                        number nums[3] <- getUserInput()
                        number result <- calculateQuadraticRoots(a, b, c)
                        displayResult(result)
                    end
        