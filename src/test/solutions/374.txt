Program([FuncDecl(Id(isAbundantNumber), [VarDecl(Id(num), NumberType, None, None)], Block([VarDecl(Id(properDivisorsSum), NumberType, None, NumLit(1.0)), VarDecl(Id(i), NumberType, None, NumLit(2.0)), For(Id(i), BinaryOp(=, Id(i), BinaryOp(+, CallExpr(Id(sqrt), [Id(num)]), NumLit(1.0))), NumLit(1.0), If((BinaryOp(=, BinaryOp(%, Id(num), Id(i)), NumLit(0.0)), Block([AssignStmt(Id(properDivisorsSum), BinaryOp(+, Id(properDivisorsSum), Id(i))), If((BinaryOp(!=, Id(i), CallExpr(Id(floor), [BinaryOp(/, Id(num), Id(i))])), AssignStmt(Id(properDivisorsSum), BinaryOp(+, Id(properDivisorsSum), CallExpr(Id(floor), [BinaryOp(/, Id(num), Id(i))])))), [], None)])), [], None)), Return(BinaryOp(>, Id(properDivisorsSum), Id(num)))])), FuncDecl(Id(main), [], Block([VarDecl(Id(userInput), NumberType, None, CallExpr(Id(int), [CallExpr(Id(input), [])])), VarDecl(Id(result), NumberType, None, CallExpr(Id(isAbundantNumber), [Id(userInput)])), CallStmt(Id(print), [Id(result)])]))])