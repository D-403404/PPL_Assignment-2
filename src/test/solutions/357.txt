Program([FuncDecl(Id(addTask), [VarDecl(Id(tasks), ArrayType([3.0], StringType), None, None), VarDecl(Id(task), StringType, None, None)], Block([CallStmt(Id(tasksAppend), [Id(task)]), CallStmt(Id(print), [BinaryOp(..., BinaryOp(..., StringLit(Task ), Id(task)), StringLit( added.))])])), FuncDecl(Id(viewTasks), [VarDecl(Id(tasks), ArrayType([3.0], StringType), None, None)], Block([If((UnaryOp(not, Id(tasks)), CallStmt(Id(print), [StringLit(No tasks available.)])), [], Block([CallStmt(Id(print), [StringLit(Tasks:)]), For(Id(i), BinaryOp(=, Id(i), CallExpr(Id(tasksLength), [])), NumLit(1.0), CallStmt(Id(print), [Id(i), ArrayCell(Id(tasks), [Id(i)])]))]))])), FuncDecl(Id(removeTask), [VarDecl(Id(tasks), ArrayType([3.0], StringType), None, None), VarDecl(Id(taskIndex), NumberType, None, None)], Block([If((BinaryOp(and, BinaryOp(<=, NumLit(1.0), Id(taskIndex)), BinaryOp(<=, Id(taskIndex), CallExpr(Id(len), [Id(tasks)]))), Block([AssignStmt(Id(removedTask), CallExpr(Id(tasksPop), [BinaryOp(-, Id(taskIndex), NumLit(1.0))])), CallStmt(Id(print), [BinaryOp(..., BinaryOp(..., StringLit(Task ), Id(removedTask)), StringLit( removed.))])])), [], CallStmt(Id(print), [StringLit(Invalid task index.)]))])), FuncDecl(Id(main), [], Block([VarDecl(Id(tasks), ArrayType([0.0], StringType), None, ArrayLit(NumLit(0.0))), VarDecl(Id(i), NumberType, None, NumLit(0.0)), For(Id(i), BooleanLit(True), UnaryOp(-, NumLit(1.0)), CallStmt(Id(print), [StringLit(Options:)])), CallStmt(Id(print), [StringLit(1. Add Task)]), CallStmt(Id(print), [StringLit(2. View Tasks)]), CallStmt(Id(print), [StringLit(3. Remove Task)]), CallStmt(Id(print), [StringLit(4. Exit)]), AssignStmt(Id(choice), CallExpr(Id(toNumber), [CallExpr(Id(input), [StringLit(Enter your choice (1-4): )])])), If((BinaryOp(=, Id(choice), NumLit(1.0)), Block([AssignStmt(Id(task), CallExpr(Id(input), [StringLit(Enter the task: )])), CallStmt(Id(addTask), [Id(tasks), Id(task)])])), [(BinaryOp(=, Id(choice), NumLit(2.0)), CallStmt(Id(viewTasks), [Id(tasks)])), (BinaryOp(=, Id(choice), NumLit(3.0)), Block([CallStmt(Id(viewTasks), [Id(tasks)]), AssignStmt(Id(taskIndex), CallExpr(Id(toNumber), [CallExpr(Id(input), [StringLit(Enter the task index to remove: )])])), CallStmt(Id(removeTask), [Id(tasks), Id(taskIndex)])])), (BinaryOp(=, Id(choice), NumLit(4.0)), Block([CallStmt(Id(print), [StringLit(Exiting program. Thank you!)]), Break]))], CallStmt(Id(print), [StringLit(Invalid choice. Please enter a number between 1 and 4.)]))]))])