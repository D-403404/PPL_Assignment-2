Program([FuncDecl(Id(isPalindrome), [VarDecl(Id(num), NumberType, None, None)], Block([VarDecl(Id(num_str), StringType, None, CallExpr(Id(str), [Id(num)])), VarDecl(Id(length), NumberType, None, CallExpr(Id(len), [Id(num_str)])), VarDecl(Id(i), NumberType, None, NumLit(0.0)), For(Id(i), BinaryOp(=, Id(i), CallExpr(Id(floor), [BinaryOp(/, Id(length), NumLit(2.0))])), NumLit(1.0), If((BinaryOp(!=, ArrayCell(Id(num_str), [Id(i)]), ArrayCell(Id(num_str), [BinaryOp(-, BinaryOp(-, Id(length), Id(i)), NumLit(1.0))])), Return(BooleanLit(False))), [], None)), Return(BooleanLit(True))])), FuncDecl(Id(findNextSmallestPalindrome), [VarDecl(Id(num), NumberType, None, None)], Block([VarDecl(Id(num), NumberType, None, BinaryOp(+, Id(num), NumLit(1.0))), For(Id(num), UnaryOp(not, CallExpr(Id(isPalindrome), [Id(num)])), BinaryOp(+, Id(num), NumLit(1.0)), AssignStmt(Id(num), Id(num))), Return(Id(num))])), FuncDecl(Id(main), [], Block([VarDecl(Id(userInput), NumberType, None, CallExpr(Id(int), [CallExpr(Id(input), [])])), VarDecl(Id(result), NumberType, None, CallExpr(Id(findNextSmallestPalindrome), [Id(userInput)])), CallStmt(Id(print), [Id(result)])]))])