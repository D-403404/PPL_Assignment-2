Program([FuncDecl(Id(calculateSquareRootBabylonianMethod), [VarDecl(Id(num), NumberType, None, None)], Block([VarDecl(Id(guess), NumberType, None, BinaryOp(/, Id(num), NumLit(2.0))), VarDecl(Id(i), NumberType, None, NumLit(0.0)), For(Id(i), BinaryOp(=, Id(i), UnaryOp(-, NumLit(1.0))), NumLit(1.0), Block([VarDecl(Id(newGuess), NumberType, None, BinaryOp(*, NumLit(0.5), BinaryOp(+, Id(guess), BinaryOp(/, Id(num), Id(guess))))), If((BinaryOp(<, CallExpr(Id(abs), [BinaryOp(-, Id(newGuess), Id(guess))]), NumLit(1e-09)), Return(Id(newGuess))), [], None), AssignStmt(Id(guess), Id(newGuess))]))])), FuncDecl(Id(main), [], Block([VarDecl(Id(userInput), NumberType, None, CallExpr(Id(toNumber), [CallExpr(Id(input), [])])), VarDecl(Id(result), NumberType, None, CallExpr(Id(calculateSquareRootBabylonianMethod), [Id(userInput)])), CallStmt(Id(print), [Id(result)])]))])