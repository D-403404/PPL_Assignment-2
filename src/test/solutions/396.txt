Program([FuncDecl(Id(addFractions), [VarDecl(Id(a), NumberType, None, None), VarDecl(Id(b), NumberType, None, None)], Return(BinaryOp(+, Id(a), Id(b)))), FuncDecl(Id(subtractFractions), [VarDecl(Id(a), NumberType, None, None), VarDecl(Id(b), NumberType, None, None)], Return(BinaryOp(-, Id(a), Id(b)))), FuncDecl(Id(multiplyFractions), [VarDecl(Id(a), NumberType, None, None), VarDecl(Id(b), NumberType, None, None)], Return(BinaryOp(*, Id(a), Id(b)))), FuncDecl(Id(divideFractions), [VarDecl(Id(a), NumberType, None, None), VarDecl(Id(b), NumberType, None, None)], Return(BinaryOp(/, Id(a), Id(b)))), FuncDecl(Id(main), [], Block([VarDecl(Id(num1), NumberType, None, CallExpr(Id(Fraction), [CallExpr(Id(input), [])])), VarDecl(Id(num2), NumberType, None, CallExpr(Id(Fraction), [CallExpr(Id(input), [])])), VarDecl(Id(addResult), NumberType, None, CallExpr(Id(addFractions), [Id(num1), Id(num2)])), VarDecl(Id(subtractResult), NumberType, None, CallExpr(Id(subtractFractions), [Id(num1), Id(num2)])), VarDecl(Id(multiplyResult), NumberType, None, CallExpr(Id(multiplyFractions), [Id(num1), Id(num2)])), VarDecl(Id(divideResult), NumberType, None, CallExpr(Id(divideFractions), [Id(num1), Id(num2)])), CallStmt(Id(print), [Id(addResult), Id(subtractResult), Id(multiplyResult), Id(divideResult)])]))])