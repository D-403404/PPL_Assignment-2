Program([FuncDecl(Id(calculateQuadraticRoots), [VarDecl(Id(a), NumberType, None, None), VarDecl(Id(b), NumberType, None, None), VarDecl(Id(c), NumberType, None, None)], Block([VarDecl(Id(discriminant), NumberType, None, BinaryOp(-, CallExpr(Id(power), [Id(b), NumLit(2.0)]), BinaryOp(*, BinaryOp(*, NumLit(4.0), Id(a)), Id(c)))), If((BinaryOp(>, Id(discriminant), NumLit(0.0)), Block([VarDecl(Id(root1), NumberType, None, BinaryOp(/, BinaryOp(+, UnaryOp(-, Id(b)), CallExpr(Id(sqrt), [Id(discriminant)])), BinaryOp(*, NumLit(2.0), Id(a)))), VarDecl(Id(root2), NumberType, None, BinaryOp(/, BinaryOp(-, UnaryOp(-, Id(b)), CallExpr(Id(sqrt), [Id(discriminant)])), BinaryOp(*, NumLit(2.0), Id(a)))), Return(CallExpr(Id(toString), [StringLit(Two distinct real roots: {}, {}), CallExpr(Id(format), [Id(root1), Id(root2)])]))])), [(BinaryOp(=, Id(discriminant), NumLit(0.0)), Block([VarDecl(Id(root), NumberType, None, BinaryOp(/, UnaryOp(-, Id(b)), BinaryOp(*, NumLit(2.0), Id(a)))), Return(CallExpr(Id(toString), [StringLit(One real root: {}), CallExpr(Id(format), [Id(root)])]))]))], Block([VarDecl(Id(realPart), NumberType, None, BinaryOp(/, UnaryOp(-, Id(b)), BinaryOp(*, NumLit(2.0), Id(a)))), VarDecl(Id(imaginaryPart), NumberType, None, BinaryOp(/, CallExpr(Id(sqrt), [CallExpr(Id(abs), [Id(discriminant)])]), BinaryOp(*, NumLit(2.0), Id(a)))), Return(CallExpr(Id(toString), [StringLit(Complex roots: {} + {}i, {} - {}i), CallExpr(Id(format), [Id(realPart), Id(imaginaryPart), Id(realPart), Id(imaginaryPart)])]))]))])), FuncDecl(Id(getUserInput), [], Block([VarDecl(Id(a), NumberType, None, CallExpr(Id(toNumber), [CallExpr(Id(input), [StringLit(Enter the coefficient a: )])])), VarDecl(Id(b), NumberType, None, CallExpr(Id(toNumber), [CallExpr(Id(input), [StringLit(Enter the coefficient b: )])])), VarDecl(Id(c), NumberType, None, CallExpr(Id(toNumber), [CallExpr(Id(input), [StringLit(Enter the coefficient c: )])])), Return(ArrayLit(Id(a), Id(b), Id(c)))])), FuncDecl(Id(displayResult), [VarDecl(Id(result), NumberType, None, None)], Block([CallStmt(Id(print), [Id(result)])])), FuncDecl(Id(main), [], Block([VarDecl(Id(nums), ArrayType([3.0], NumberType), None, CallExpr(Id(getUserInput), [])), VarDecl(Id(result), NumberType, None, CallExpr(Id(calculateQuadraticRoots), [Id(a), Id(b), Id(c)])), CallStmt(Id(displayResult), [Id(result)])]))])