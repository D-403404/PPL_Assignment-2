Program([FuncDecl(Id(isPalindromeNumber), [VarDecl(Id(num), NumberType, None, None)], Block([VarDecl(Id(originalNumber), NumberType, None, Id(num)), VarDecl(Id(reversedNumber), NumberType, None, NumLit(0.0)), For(Id(num), BinaryOp(<=, Id(num), NumLit(0.0)), CallExpr(Id(floor), [BinaryOp(/, Id(num), NumLit(10.0))]), Block([VarDecl(Id(digit), NumberType, None, BinaryOp(%, Id(num), NumLit(10.0))), AssignStmt(Id(reversedNumber), BinaryOp(+, BinaryOp(*, Id(reversedNumber), NumLit(10.0)), Id(digit)))])), Return(BinaryOp(=, Id(originalNumber), Id(reversedNumber)))])), FuncDecl(Id(main), [], Block([VarDecl(Id(userNumber), NumberType, None, CallExpr(Id(int), [CallExpr(Id(input), [StringLit(Enter a number: )])])), VarDecl(Id(result), NumberType, None, CallExpr(Id(isPalindromeNumber), [Id(userNumber)])), CallStmt(Id(print), [StringLit(Is the number palindrome?), Id(result)])]))])