Program([FuncDecl(Id(addComplexNumbers), [VarDecl(Id(a), NumberType, None, None), VarDecl(Id(b), NumberType, None, None)], Return(BinaryOp(+, Id(a), Id(b)))), FuncDecl(Id(subtractComplexNumbers), [VarDecl(Id(a), NumberType, None, None), VarDecl(Id(b), NumberType, None, None)], Return(BinaryOp(-, Id(a), Id(b)))), FuncDecl(Id(multiplyComplexNumbers), [VarDecl(Id(a), NumberType, None, None), VarDecl(Id(b), NumberType, None, None)], Return(BinaryOp(*, Id(a), Id(b)))), FuncDecl(Id(divideComplexNumbers), [VarDecl(Id(a), NumberType, None, None), VarDecl(Id(b), NumberType, None, None)], Return(BinaryOp(/, Id(a), Id(b)))), FuncDecl(Id(main), [], Block([VarDecl(Id(real1), NumberType, None, CallExpr(Id(toNumber), [CallExpr(Id(input), [])])), VarDecl(Id(imag1), NumberType, None, CallExpr(Id(toNumber), [CallExpr(Id(input), [])])), VarDecl(Id(real2), NumberType, None, CallExpr(Id(toNumber), [CallExpr(Id(input), [])])), VarDecl(Id(imag2), NumberType, None, CallExpr(Id(toNumber), [CallExpr(Id(input), [])])), VarDecl(Id(num1), NumberType, None, CallExpr(Id(complex), [Id(real1), Id(imag1)])), VarDecl(Id(num2), NumberType, None, CallExpr(Id(complex), [Id(real2), Id(imag2)])), VarDecl(Id(addResult), NumberType, None, CallExpr(Id(addComplexNumbers), [Id(num1), Id(num2)])), VarDecl(Id(subtractResult), NumberType, None, CallExpr(Id(subtractComplexNumbers), [Id(num1), Id(num2)])), VarDecl(Id(multiplyResult), NumberType, None, CallExpr(Id(multiplyComplexNumbers), [Id(num1), Id(num2)])), VarDecl(Id(divideResult), NumberType, None, CallExpr(Id(divideComplexNumbers), [Id(num1), Id(num2)])), CallStmt(Id(print), [Id(addResult), Id(subtractResult), Id(multiplyResult), Id(divideResult)])]))])