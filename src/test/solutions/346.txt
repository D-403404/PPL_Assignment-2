Program([FuncDecl(Id(getUserNumbers), [], Block([VarDecl(Id(numbersInput), NumberType, None, CallExpr(Id(input), [StringLit(Enter a list of numbers separated by spaces: )])), VarDecl(Id(numbersList), ArrayType([0.0], NumberType), None, ArrayLit(NumLit(0.0))), For(Id(num), BinaryOp(=, Id(num), CallExpr(Id(length), [Id(numbersInput)])), NumLit(1.0), CallStmt(Id(numbersListAppend), [CallExpr(Id(toNumber), [Id(num)])])), Return(Id(numbersList))])), FuncDecl(Id(filterNumbersDivisibleByFive), [VarDecl(Id(numbersList), NumberType, None, None)], Block([VarDecl(Id(divisibleByFive), ArrayType([0.0], NumberType), None, ArrayLit(NumLit(0.0))), VarDecl(Id(i), NumberType, None, NumLit(0.0)), For(Id(i), CallExpr(Id(length), [Id(numbersList)]), NumLit(1.0), If((BinaryOp(=, BinaryOp(%, Id(num), NumLit(5.0)), NumLit(0.0)), CallStmt(Id(divisibleByFiveAppend), [Id(num)])), [], None)), Return(Id(divisibleByFive))])), FuncDecl(Id(main), [], Block([VarDecl(Id(userNumbers), NumberType, None, CallExpr(Id(getUserNumbers), [])), VarDecl(Id(result), NumberType, None, CallExpr(Id(filterNumbersDivisibleByFive), [Id(userNumbers)])), CallStmt(Id(print), [StringLit(Numbers divisible by 5: {}), CallExpr(Id(format), [Id(result)])])]))])